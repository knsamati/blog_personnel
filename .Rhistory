style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
labels <- sprintf(
"<strong>%s</strong><br/> %g",
base_ecole$PREFECTURE, base_ecole$Taux_redoublement
) %>% lapply(htmltools::HTML)
base_ecole %>%
leaflet() %>%
addPolygons(
fillColor = ~pal(Taux_redoublement),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
labels <- sprintf(
"<strong>%s</strong><br/> %g (%)",
base_ecole$PREFECTURE, base_ecole$Taux_redoublement
) %>% lapply(htmltools::HTML)
base_ecole %>%
leaflet() %>%
addPolygons(
fillColor = ~pal(Taux_redoublement),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
sprintf("%s is %f feet tall\n", "Sven", 7.1)
base_ecole %>%
leaflet() %>%
addPolygons(
fillColor = ~pal(Taux_redoublement),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%
addLegend(pal = pal, values = ~Taux_redoublement, opacity = 0.7, title = NULL,
position = "bottomright")
base_ecole %>%
leaflet() %>%
addPolygons(
fillColor = ~pal(Taux_redoublement),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%
addLegend(pal = pal, values = ~Taux_redoublement, opacity = 0.7, title = NULL)
# position = "bottomright")
library(leaflet)
library(sf)
library(tidyverse)
prefecture_sf = st_read("C:/Users/Samati/Desktop/r/geo/TGO_l04_2012.shp")
prefecture_sf$PREFECTURE <- stringr::str_replace(prefecture_sf$PREFECTURE, "^(S/p).*", "MO")
prefecture_sf$PREFECTURE <- gsub("-","_",prefecture_sf$PREFECTURE)
prefecture_sf$PREFECTURE <- gsub(" ","_",prefecture_sf$PREFECTURE)
prefecture_sf$PREFECTURE <- toupper(prefecture_sf$PREFECTURE)
df <- readxl::read_xlsx("C:/Users/Samati/Desktop/r/geo/primaire_geo.xlsx")
dfx <- df %>%
group_by(PREFECTURE,.drop=FALSE) %>%
summarise(Taux_redoublement = 100*(sum(red_G_AN2+red_F_AN2)/sum(Effectif_F_AN1+Effectif_G_AN1))) %>%
ungroup()
base_ecole <- left_join(prefecture_sf,dfx,by="PREFECTURE")
names(st_geometry(base_ecole)) = NULL
bins <- c(3, 6, 9, 12, 15, 20)
pal <- colorBin("YlOrRd", domain = base_ecole$Taux_redoublement, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/> %g ",
base_ecole$PREFECTURE, base_ecole$Taux_redoublement
) %>% lapply(htmltools::HTML)
base_ecole %>%
leaflet() %>%
addPolygons(
fillColor = ~pal(Taux_redoublement),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
) %>%
addLegend(pal = pal, values = ~Taux_redoublement, opacity = 0.7, title = NULL)
# position = "bottomright")
View(base_ecole)
SAVANES <- base_ecole %>%
filter(REGION=="SAVANES")
savanes_pt <- df %>%
mutate(place=((Effectif_G_AN2+Effectif_F_AN2))/Nbre_places_assises) %>%
filter(DRE== "DRE SAVANES")
pal = colorNumeric("RdYlBu", domain = savanes_pt$place)
leaflet(data = savanes_pt) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addCircles(col = ~pal(place), opacity = 0.9) %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addLegend(pal = pal, values = ~place)
View(savanes_pt)
quartille(savanes_pt$place)
summary(savanes_pt$place)
SAVANES <- base_ecole %>%
filter(REGION=="SAVANES")
savanes_pt <- df %>%
mutate(place=ifelse(Nbre_places_assises=0,0,((Effectif_G_AN2+Effectif_F_AN2))/Nbre_places_assises)) %>%
filter(DRE== "DRE SAVANES")
pal = colorNumeric("RdYlBu", domain = savanes_pt$place)
leaflet(data = savanes_pt) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addCircles(col = ~pal(place), opacity = 0.9) %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addLegend(pal = pal, values = ~place)
?ifelse
SAVANES <- base_ecole %>%
filter(REGION=="SAVANES")
savanes_pt <- df %>%
mutate(place = ifelse (Nbre_places_assises == 0,0,((Effectif_G_AN2+Effectif_F_AN2))/Nbre_places_assises)) %>%
filter(DRE== "DRE SAVANES")
pal = colorNumeric("RdYlBu", domain = savanes_pt$place)
leaflet(data = savanes_pt) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addCircles(col = ~pal(place), opacity = 0.9) %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addLegend(pal = pal, values = ~place)
View(savanes_pt)
summary(savanes_pt$place)
SAVANES <- base_ecole %>%
filter(REGION=="SAVANES")
savanes_pt <- df %>%
mutate(place = ifelse (Nbre_places_assises == 0,0,((Effectif_G_AN2+Effectif_F_AN2))/Nbre_places_assises)) %>%
filter(DRE== "DRE SAVANES")
pal = colorNumeric("RdYlBu", domain = savanes_pt$place)
names(st_geometry(SAVANES)) = NULL
leaflet(data = savanes_pt) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addCircles(col = ~pal(place), opacity = 0.9) %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addLegend(pal = pal, values = ~place)
summary(savanes_pt$place)
SAVANES %>%
leaflet() %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addCircles(col = ~pal(place), opacity = 0.9) %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addLegend(pal = pal, values = ~place)
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addProviderTiles(providers$OpenStreetMap.BlackAndWhite) %>%
addCircles(col = ~pal(place), opacity = 0.9) %>%
addLegend(pal = pal, values = ~place)
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE)
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addCircles(col = ~pal(place), opacity = 0.9) %>%
addLegend(pal = pal, values = ~place)
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addCircles(~long, ~lat, col = ~pal(place), opacity = 0.9) %>%
addLegend(pal = pal, values = ~place)
View(savanes_pt)
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addCircles(~savanes_pt$long, ~savanes_pt$lat, col = ~pal(place), opacity = 0.9) %>%
addLegend(pal = pal, values = ~place)
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addCircles(~savanes_pt$long, ~savanes_pt$lat, col = ~pal(savanes_pt$place), opacity = 0.9) %>%
addLegend(pal = pal, values = ~savanes_pt$place)
View(savanes_pt)
SAVANES <- base_ecole %>%
filter(REGION=="SAVANES")
savanes_pt <- df %>%
mutate(place = ifelse (Nbre_places_assises == 0,0,((Effectif_G_AN2+Effectif_F_AN2))/Nbre_places_assises)) %>%
filter(DRE== "DRE SAVANES")
pal = colorNumeric("RdYlBu", domain = savanes_pt$place)
names(st_geometry(SAVANES)) = NULL
labels <- sprintf(
"<strong>%s</strong><br/> %g ",
savanes_pt$NOM_ETABLISSEMENT, savanes_pt$place
) %>% lapply(htmltools::HTML)
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addCircles(~savanes_pt$long, ~savanes_pt$lat, col = ~pal(savanes_pt$place), opacity = 0.9,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~savanes_pt$place,title = NULL)
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addCircles(~savanes_pt$long, ~savanes_pt$lat, col = ~pal(savanes_pt$place), opacity = 0.9,
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~savanes_pt$place,title = NULL)
summary(savanes_pt$place)
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addCircles(~savanes_pt$long, ~savanes_pt$lat, col = ~pal(savanes_pt$place), opacity = 0.9,
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~savanes_pt$place,title = NULL,labFormat = labelFormat(transform = function(x) sort(x, decreasing = TRUE)))
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addCircles(~savanes_pt$long, ~savanes_pt$lat, col = ~pal(savanes_pt$place), opacity = 0.9,
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~savanes_pt$place,title = NULL)
SAVANES <- base_ecole %>%
filter(REGION=="SAVANES")
savanes_pt <- df %>%
mutate(place = ifelse (Nbre_places_assises == 0,1,((Effectif_G_AN2+Effectif_F_AN2))/Nbre_places_assises)) %>%
filter(DRE== "DRE SAVANES")
pal = colorNumeric("RdYlBu", domain = savanes_pt$place)
names(st_geometry(SAVANES)) = NULL
labels <- sprintf(
"<strong>%s</strong><br/> %g ",
savanes_pt$NOM_ETABLISSEMENT, savanes_pt$place
) %>% lapply(htmltools::HTML)
SAVANES %>%
leaflet() %>%
addPolygons(data = SAVANES, fill = FALSE) %>%
addCircles(~savanes_pt$long, ~savanes_pt$lat, col = ~pal(savanes_pt$place), opacity = 0.9,
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~savanes_pt$place,title = NULL)
blogdown::serve_site()
install.packages("gglogspline")
install.packages('ggtext')
remotes::install_github("wilkelab/ggtext")
remotes::install_github("wilkelab/ggtext")
remotes::install_github("wilkelab/ggtext")
install.packages('rlang')
install.packages('rlang')
install.packages('rlang')
library(rlang)
remotes::install_github("wilkelab/ggtext")
install.packages('rworldxtra')
install.packages('knitr','ggplot2')
install.packages("knitr", "ggplot2")
install.packages("knitr", "tidyverse")
install.packages("knitr", "tidyverse")
install.packages("knitr", "tidyverse")
install.packages("knitr", "tidyverse")
install.packages("knitr", "tidyverse")
install.packages("knitr", "tidyverse")
library('osmdata')
q <- opq ("lomé togo") %>%
add_osm_feature(key = "amenity", value = "restaurant") %>%
add_osm_feature(key = "amenity", value = "pub")%>%
osmdata_sf()
names(q)
q
devtools::install_github ('ropensci/osmplotr')
blogdown::serve_site()
servr::daemon_stop(1)
install.packages('ggmap')
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
install.packages('ggmap')
install.packages("ggmap")
library(ggmap)
osm_sf <- get_map(location = c(left = -122.5501, bottom = 37.6993, right = -122.3367, top = 37.8116),
zoom = 14 , color = "bw")
ggmap(osm_sf)
sf_trees <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-28/sf_trees.csv')
trees <- ggmap(osm_sf) +
geom_point(data = sf_trees, aes( x = longitude, y = latitude),
position=position_jitter(w=0.00025,h=0.00025),
colour = "darkgreen",
size = 0.01,
alpha = 0.3) +
stat_density2d(data = sf_trees, aes(x = longitude, y = latitude, fill = ..level..),
alpha = 0.15,
geom = "polygon",
n = 100) +
scale_fill_gradient(low = "yellow", high = "red") +
labs(fill = "Density") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = c(0.95, 0.60),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(1, 2, 10, 2))
trees
library(ggmap)
lome_sud <- readxl::read_xlsx("C:/Users/Samati/Desktop/r/geo/lome_sud.xlsx")
qmplot(lon, lat, data = lome_sud, maptype = "toner-background", color = Statut)
lome_sud <- readxl::read_xlsx("C:/Users/Samati/Desktop/r/geo/lome_sud.xlsx")
qmplot(lon, lat, data = lome_sud, maptype = "toner-background", color = Statut)
qmplot(long, lat, data = lome_sud, maptype = "toner-background", color = Statut)
qmplot(long, lat, data = lome_sud, maptype = "toner-lite", color = Statut)
qmplot(long, lat, data = lome_sud, maptype = "toner-lite", color = Statut)
library(ggmap)
lome_sud <- readxl::read_xlsx("C:/Users/Samati/Desktop/r/geo/lome_sud.xlsx")
qmplot(long, lat, data = lome_sud, maptype = "toner-lite", color = Statut)
user = 'contrat_performance'
password = 'Contrat_2018'
library(httr) # Pour effectuer la requete HTTP sur l'API de Kobotoolbox
library(jsonlite) # Pour convertir les données de JSON au format dataframe de R
library(tidyverse) # Pour la manibulation des données
# la requête avec les identifiants
base = GET(url = "https://kc.humanitarianresponse.info/api/v1/data/234083?format=json",authenticate(user,password),progress())
# On recupère les données qui sont sous format JSON
base = content(base, 'text', encoding = "UTF-8")
# On convertit les données de JSON à Dataframe
base = fromJSON(base)
install.packages('tidyverse')
user = 'contrat_performance'
password = 'Contrat_2018'
library(httr) # Pour effectuer la requete HTTP sur l'API de Kobotoolbox
library(jsonlite) # Pour convertir les données de JSON au format dataframe de R
library(tidyverse) # Pour la manibulation des données
# la requête avec les identifiants
base = GET(url = "https://kc.humanitarianresponse.info/api/v1/data/234083?format=json",authenticate(user,password),progress())
# On recupère les données qui sont sous format JSON
base = content(base, 'text', encoding = "UTF-8")
# On convertit les données de JSON à Dataframe
base = fromJSON(base)
data.table::setDT(base)
base
user = 'contrat_performance'
password = 'Contrat_2018'
library(httr) # Pour effectuer la requete HTTP sur l'API de Kobotoolbox
library(jsonlite) # Pour convertir les données de JSON au format dataframe de R
library(tidyverse) # Pour la manibulation des données
# la requête avec les identifiants
base = GET(url = "https://kc.humanitarianresponse.info/api/v1/data/234083?format=json",authenticate(user,password),progress())
# On recupère les données qui sont sous format JSON
base = content(base, 'text', encoding = "UTF-8")
# On convertit les données de JSON à Dataframe
base = fromJSON(base)
View(base)
View(base)
base = GET(url = "https://kc.humanitarianresponse.info/api/v1/data/234083?format=json",authenticate(user,password),progress())
# On recupère les données qui sont sous format JSON
base = content(base, 'text', encoding = "UTF-8")
# On convertit les données de JSON à Dataframe
base = fromJSON(base)
head(base)
names(base) <- gsub("/","_",names(base))
head(base)
df <- base %>%
select(enseignant_sexe,enseignant_diplom_academique,_notes,identification_region,identification_inspection)
names(base) <- gsub("/","",names(base))
names(base) <- gsub("_","",names(base))
df <- base %>%
select(enseignantsexe,enseignantdiplom_academique,notes,identificationregion,identificationinspection)
df <- base %>%
select(enseignantsexe,enseignantdiplomacademique,notes,identificationregion,identificationinspection)
View(df)
str(df)
df <- base %>%
select(enseignantsexe,enseignantdiplomacademique,as.numeric(notes),identificationregion,identificationinspection)
df$notes <- as.numeric()
df$notes <- as.numeric(df$notes)
str(df)
base2 <- GET(url = "https://kc.humanitarianresponse.info/api/v1/data/219686?format=json",authenticate(user,password),progress())
base2 <- content(base2, 'text', encoding = "UTF-8")
base2 <- fromJSON(base2)
base2 <- GET(url = "https://kc.humanitarianresponse.info/api/v1/data/219686?format=json",authenticate(user,password),progress())
y
library(reticulate)
Sys.which("python")
use_python("C:\\Users\\Samati\\AppData\\Local\\Programs\\Python\\Python38\\python.exe")
repl_python()
import requests # Pour effectuer la requête
import pandas as pd # Pour manipuler les données
# la requêre
data = requests.get(r"https://kc.humanitarianresponse.info/api/v1/data/234083?format=json",auth=(user,password))
# convertir en JSON
donnee=data.json()
# Converir au format DataFrame de Pandas
df = pd.DataFrame.from_dict(donnee)
df.shape()
exit()
exit
use_python("C:\\Users\\Samati\\AppData\\Local\\Programs\\Python\\Python38\\python.exe",required = T)
library(reticulate)
Sys.which('python')
use_python("C:\\Users\\Samati\\AppData\\Local\\Programs\\Python\\Python38\\python.exe",required = T)
use_python("C:\\Users\\Samati\\AppData\\Local\\Programs\\Python\\Python38\\python.exe",required = T)
Sys.which('python')
repl_python()
import requests # Pour effectuer la requête
import pandas as pd # Pour manipuler les données
# la requêre
data = requests.get(r"https://kc.humanitarianresponse.info/api/v1/data/234083?format=json",auth=(user,password))
# convertir en JSON
donnee=data.json()
# Converir au format DataFrame de Pandas
df = pd.DataFrame.from_dict(donnee)
df.shape()
import requests # Pour effectuer la requête
import pandas as pd # Pour manipuler les données
user = 'contrat_performance'
password = 'Contrat_2018'
# la requêre
data = requests.get(r"https://kc.humanitarianresponse.info/api/v1/data/234083?format=json",auth=(user,password))
# convertir en JSON
donnee=data.json()
# Converir au format DataFrame de Pandas
df = pd.DataFrame.from_dict(donnee)
df.shape()
import requests # Pour effectuer la requête
import pandas as pd # Pour manipuler les données
user = 'contrat_performance'
password = 'Contrat_2018'
# la requêre
data = requests.get(r"https://kc.humanitarianresponse.info/api/v1/data/219686?format=json",auth=(user,password))
# convertir en JSON
donnee=data.json()
# Converir au format DataFrame de Pandas
df = pd.DataFrame.from_dict(donnee)
df.shape()
df.head()
exit
blogdown::serve_site()
servr::daemon_stop(1)
